import csv
import os
import subprocess

import chardet
from loguru import logger


def detect_encoding(file_path):
    """Detects the encoding of a file."""
    with open(file_path, 'rb') as file:
        result = chardet.detect(file.read())
        return result['encoding']


def extract_defect_info(file_path):
    """Extracts the defect number, class type, and total count from an .lrf file."""
    try:
        encoding = detect_encoding(file_path)
        defects = []
        total_defects = 0
        with open(file_path, encoding=encoding, errors='ignore') as file:
            bw_defect_table = False
            header_found = False

            for line in file:
                line = line.strip()
                if "[DefectList]" in line or "DefectDataList" in line:
                    bw_defect_table = True
                    continue

                if bw_defect_table:
                    if line.startswith("DefectDataList"):
                        # Extract total defect count from the line (e.g., "DefectDataList 22")
                        parts = line.split()
                        if len(parts) == 2 and parts[1].isdigit():
                            total_defects = int(parts[1])
                        continue

                    if not header_found:
                        # Skip the header line
                        header_found = True
                        continue
                    elif not line:  # Skip empty lines
                        continue

                    # Split line and filter out empty strings
                    parts = [p for p in line.split(' ') if p]
                    if len(parts) >= 10:  # Ensure line has enough parts
                        defect_num = parts[0]
                        class_type = parts[8]  # ClassType is typically the 9th column (0-based index)
                        if defect_num.isdigit() and class_type.lstrip('-').isdigit():  # Allow for negative numbers
                            defects.append({
                                'number': int(defect_num),
                                'class_type': int(class_type)
                            })

        # If no total_defects was found in DefectDataList, use the count of defects found
        if total_defects == 0:
            total_defects = len(defects)

        return defects, total_defects
    except Exception as e:
        logger.error(f"Error reading or processing {file_path}: {e}")
        with open('error.log', 'a') as log_file:
            log_file.write(f"{file_path}: {e}\n")
        return None, 0


def count_images(lot_path):
    """Count the number of image files in the InstantReviewRt directory"""
    try:
        rt_path = os.path.join(os.path.dirname(lot_path), 'InstantReviewRt/Images')
        if os.path.exists(rt_path):
            # Count only .png files that don't have L, L_p, U, or U_p suffixes
            image_files = [f for f in os.listdir(rt_path)
                           if f.endswith('.png')
                           and not any(suffix in f for suffix in ['L.png', 'L_p.png', 'U.png', 'U_p.png'])]
            return len(image_files)
        return 0
    except Exception as e:
        logger.error(f"Error counting images in {lot_path}: {e}")
        return 0


def find_lrf_files_and_extract_info(directory):
    """Finds all .lrf files in the directory and its subdirectories, extracts lot IDs,
    finds associated defect numbers, counts image files, and records the image path."""
    lrf_info = []

    # Walk through directory and subdirectories
    for root, _, files in os.walk(directory, followlinks=True):
        for file in files:
            if file.endswith('.lrf'):
                # Check if file has one of the required suffixes
                if not any(suffix in file for suffix in ['_ADD', '_classify', '_classified', '_Classified', '_for_Ken']):
                    continue

                file_path = os.path.join(root, file)
                lot_id = os.path.splitext(os.path.basename(file_path))[0]
                logger.info(f"Processing {lot_id}")

                defect_info, total_defects = extract_defect_info(file_path)
                image_count = count_images(file_path)
                # 新增：计算 image_path，假设图像存放在 .lrf 文件所在目录的上一级目录的 InstantReviewRt/Images
                image_path = os.path.join(os.path.dirname(file_path), 'InstantReviewRt/Images')

                if defect_info:
                    for defect in defect_info:
                        lrf_info.append({
                            'lot_id': lot_id,
                            'defect_number': defect['number'],
                            'image_count': image_count,
                            'total_defects': total_defects,
                            'class_type': defect['class_type'],
                            'image_path': image_path  # 新增字段
                        })
                else:
                    # If no valid defect info found, count it as class 0
                    logger.warning(f"No valid defect info found for {lot_id} - treating as Class 0")
                    lrf_info.append({
                        'lot_id': lot_id,
                        'defect_number': 1,  # Assign a dummy defect number
                        'image_count': image_count,
                        'total_defects': 1,  # Set total defects to 1 since we're counting it as one class 0 defect
                        'class_type': 0,     # Count as Class 0
                        'image_path': image_path  # 新增字段
                    })

    return lrf_info


def write_to_csv(lrf_info, output_file):
    """Writes the aggregated lot information to a CSV file."""
    try:
        # 修改：增加 image_path 字段
        fieldnames = ['Lot_ID', 'Defect_Number', 'Class_Type', 'Image_Count', 'Image_Path']
        with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            # 写入每条缺陷记录（不做汇总）
            for info in lrf_info:
                writer.writerow({
                    'Lot_ID': info['lot_id'],
                    'Defect_Number': info['defect_number'],
                    'Class_Type': info['class_type'],
                    'Image_Count': info['image_count'],
                    'Image_Path': info['image_path']  # 新增字段写入
                })
        print(f"Information saved to {output_file}")
    except Exception as e:
        logger.error(f"Error writing to CSV {output_file}: {e}")


if __name__ == "__main__":
    dataset_dir = '.'
    lrf_info = find_lrf_files_and_extract_info(dataset_dir)
    output_file = 'lrf_defect_info.csv'
    write_to_csv(lrf_info, output_file)
    print(f"Information saved to {output_file}")



总结
defect_info：仅针对单个 .lrf 文件，返回的是一个缺陷条目的列表，每个条目包含缺陷编号和类别。
lrf_info：在遍历所有 .lrf 文件后，每个缺陷记录都会存入一个字典，包含批次ID（lot_id）、缺陷编号（defect_number）、缺陷类别（class_type）、该批次的图像数量（image_count）、文件中记录的总缺陷数（total_defects）以及对应图像文件夹路径（image_path）。
这种设计使得你能够对每个批次内的每个缺陷进行单独记录和后续统计，非常适合后续的分析和报告使用。

